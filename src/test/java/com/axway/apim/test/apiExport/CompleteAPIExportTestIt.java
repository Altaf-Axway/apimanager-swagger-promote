package com.axway.apim.test.apiExport;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.testng.annotations.Test;

import com.axway.apim.test.ExportTestAction;
import com.axway.apim.test.ImportTestAction;
import com.consol.citrus.annotations.CitrusTest;
import com.consol.citrus.dsl.testng.TestNGCitrusTestDesigner;
import com.consol.citrus.functions.core.RandomNumberFunction;
import com.consol.citrus.message.MessageType;

@Test
public class CompleteAPIExportTestIt extends TestNGCitrusTestDesigner {
	
	@Autowired
	private ExportTestAction exportAction;
	@Autowired
	private ImportTestAction importAction;
	
	@CitrusTest
	public void run() {
		description("Import a complete API, incl. Tag, Policies, Image, ..., export it and Re-Import. Should lead to a no-change!");
		
		
		variable("handleNullAsChange", "true"); // Enforce to check all properties!
		variable("apiNumber", RandomNumberFunction.getRandomNumber(3, true));
		variable("apiPath", "/api/test/"+this.getClass().getSimpleName()+"-${apiNumber}");
		variable("apiName", this.getClass().getSimpleName()+"-${apiNumber}");
		variable("state", "published");
		variable("exportLocation", "citrus:systemProperty('java.io.tmpdir')");
		
		variable("image", "/com/axway/apim/test/files/basic/API-Logo.jpg");
		variable("customProperty1", "Test-Input 1");
		variable("customProperty2", "1");
		variable("customProperty3", "true");
		variable("requestPolicy", "Request policy 1");
		variable("responsePolicy", "Response policy 1");
		variable("routePolicy", "Routing policy 1");
		variable("faultHandlerPolicy", "Faulthandler policy 1");
		variable("descriptionManual", "This is my manual description");
		variable("descriptionType", "manual");
		variable("certFile4", "/com/axway/apim/test/files/cacerts/../certificates/DSTRootCAX3.crt");		
		variable("appName1", "App Subcription-Add-Test 1 ${orgNumber}");
		variable("appName2", "App Subcription-Add-Test 2 ${orgNumber}");
		// ############## Creating Test-Application 1 #################
		http().client("apiManager")
			.send()
			.post("/applications")
			.name("orgCreatedRequest")
			.header("Content-Type", "application/json")
			.payload("{\"name\":\"${appName1}\",\"apis\":[],\"organizationId\":\"${orgId}\"}");

		http().client("apiManager")
			.receive()
			.response(HttpStatus.CREATED)
			.messageType(MessageType.JSON)
			.extractFromPayload("$.id", "testAppId1")
			.extractFromPayload("$.name", "testAppName1");
		
		echo("####### Created Test-Application 1: '${testAppName1}' with id: '${testAppId1}' #######");
		
		// ############## Creating Test-Application 2 #################
		createVariable("extClientId", RandomNumberFunction.getRandomNumber(15, true));
		http().client("apiManager")
			.send()
			.post("/applications")
			.name("orgCreatedRequest")
			.header("Content-Type", "application/json")
			.payload("{\"name\":\"${appName2}\",\"apis\":[],\"organizationId\":\"${orgId2}\"}");

		http().client("apiManager")
			.receive()
			.response(HttpStatus.CREATED)
			.messageType(MessageType.JSON)
			.extractFromPayload("$.id", "testAppId2")
			.extractFromPayload("$.name", "testAppName2");
		
		echo("####### Created Test-Application 2: '${testAppName2}' with id: '${testAppId2}' #######");
		
		// These folders & filenames are generated by the export tool (must be in-sync with the API (don't change it!) 
		variable("exportFolder", "api-test-${apiName}");
		variable("exportAPIName", "${apiName}.json");

		echo("####### Importing the API, which should exported in the second step #######");
		createVariable(ImportTestAction.API_DEFINITION,  "/com/axway/apim/test/files/basic/petstore.json");
		createVariable(ImportTestAction.API_CONFIG,  "/com/axway/apim/test/files/basic/complete-config.json");
		
		createVariable("expectedReturnCode", "0");
		action(importAction);

		echo("####### Export the API fromt the API-Manager #######");
		createVariable(ExportTestAction.EXPORT_API,  "${apiPath}");
		createVariable("expectedReturnCode", "0");
		action(exportAction);
		
		echo("####### Re-Import the same API and it must lead to a No-Change result #######");
		createVariable(ImportTestAction.API_DEFINITION,  "${exportLocation}${exportFolder}/${exportAPIName}");
		createVariable(ImportTestAction.API_CONFIG,  "${exportLocation}${exportFolder}/api-config.json");
		createVariable("image",  "${exportLocation}${exportFolder}/api-image.jpg");
		createVariable("expectedReturnCode", "10");
		action(importAction);
	}

}
